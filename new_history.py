import telebot
from telebot import types
import sqlite3
from datetime import datetime
from pytz import timezone
import time

bot = telebot.TeleBot("5026006801:AAGK0sMjfFpbG8F1D8IeYJ9bz_mNkZJN_S8") # –¥–µ–Ω–∏—Å
# bot = telebot.TeleBot("1822215840:AAEZ1KFj0Voy0jIlrEbN2018mxNIzvWe4zs") # —Ä–æ–º–∞
# bot = telebot.TeleBot("5132422043:AAGzh5vsRnIt2YsUaLCKfVLBySHju5IVQUY") # condonio
db = sqlite3.connect('base.db', check_same_thread=False)

# cursor = db.cursor()
# cursor.execute("DROP TABLE users")
# db.commit()
# cursor.execute("CREATE TABLE IF NOT EXISTS users (userID BIGINT PRIMARY KEY, userName TEXT, userFirstName TEXT, userPage INT)")
# db.commit()
# cursor.execute("DROP TABLE orders")
# db.commit()
# cursor.execute("CREATE TABLE IF NOT EXISTS orders (userID BIGINT, productID INT, amount INT, price INT, statusOrder INT)")
# db.commit()


# cursor.execute(f"SELECT * FROM products")
# print(cursor.fetchall())
# cursor.execute(f"SELECT * FROM orders")
# print(cursor.fetchall())
# cursor.execute(f"SELECT * FROM users")
# print(cursor.fetchall())
# cursor.close()

def error(message):
    user_id = message.from_user.username
    username = message.from_user.username
    firstName = message.from_user.first_name
    print("–ó–ª–∞–º–∞–≤ –±–æ—Ç–∞:", user_id, username, firstName)
    bot.send_message(message.from_user.id,
                     text="–©–æ–± –≤–¥–∞–ª–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è - —Å–∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é '/start'")



def media(user_id):
    cursor = db.cursor()
    cursor.execute(f"SELECT userPage FROM users WHERE userID={user_id}")
    userPage = cursor.fetchone()[0]
    cursor.close()

    # media = ["D:\\condonio\\super_sensitive.jpg", "D:\\condonio\\vanish_hyperthin.jpg",
    #      "D:\\condonio\\glowing_pleasures.jpg", "D:\\condonio\\tattoo_touch.jpg",
    #      "D:\\condonio\\extreme_ribs.jpg", "D:\\condonio\\flavor_waves.jpg",
    #      "D:\\condonio\\classic_select.jpg", "D:\\condonio\\super_studs.jpg",
    #      "D:\\condonio\\legend_xl.jpg", "D:\\condonio\\ultrafeel.jpg",
    #      "D:\\condonio\\color_sensation.jpg"
    #      ]

    # media = ["F:\\D\\condonio\\super_sensitive.jpg", "F:\\D\\condonio\\vanish_hyperthin.jpg",
    #          "F:\\D\\condonio\\glowing_pleasures.jpg", "F:\\D\\condonio\\tattoo_touch.jpg",
    #          "F:\\D\\condonio\\extreme_ribs.jpg", "F:\\D\\condonio\\flavor_waves.jpg",
    #          "F:\\D\\condonio\\classic_select.jpg", "F:\\D\\condonio\\super_studs.jpg",
    #          "F:\\D\\condonio\\legend_xl.jpg", "F:\\D\\condonio\\ultrafeel.jpg",
    #          "F:\\D\\condonio\\color_sensation.jpg"
    #          ]

    media = ["super_sensitive.jpg", "vanish_hyperthin.jpg",
             "glowing_pleasures.jpg", "tattoo_touch.jpg",
             "extreme_ribs.jpg", "flavor_waves.jpg",
             "classic_select.jpg", "super_studs.jpg",
             "legend_xl.jpg", "ultrafeel.jpg",
             "color_sensation.jpg"
             ]

    return media[userPage-1]

# for caption
def prices_condoms(num):
    cursor = db.cursor()
    cursor.execute(f"SELECT priceProduct FROM products")
    result = cursor.fetchall()[num][0]
    cursor.close()
    return result

def captions(user_id):
    cursor = db.cursor()
    cursor.execute(f"SELECT userPage FROM users WHERE userID={user_id}")
    userPage = cursor.fetchone()[0]
    cursor.close()
    captions = [
        f'üü†<b>ONE Super Sensitive</b>üü†\n\n–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ –∫–ª–∞—Å–∏—á–Ω–æ—ó —Ñ–æ—Ä–º–∏ —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –∑ —É–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫–æ–≥–æ –ª–∞—Ç–µ–∫—Å—É, –∑ –≤–∏—Å–æ–∫–∏–º –≤–º—ñ—Å—Ç–æ–º –ª—É–±—Ä–∏–∫–∞–Ω—Ç—É –Ω–∞ —Å–∏–ª—ñ–∫–æ–Ω–æ–≤—ñ–π –æ—Å–Ω–æ–≤—ñ—é.\n\nüíã–î–ª—è –Ω—ñ–∂–Ω–∏—Ö —Ç–∞ —á—É—Ç—Ç—î–≤–∏—Ö.\n ‚òòÔ∏è–î–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ü—ñ–Ω—É—î –ø—Ä–∏—Ä–æ–¥–Ω—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –∑–∞–±—É–≤–∞—î –ø—Ä–æ –±–µ–∑–ø–µ–∫—É. \n\n üí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(0)} ‚Ç¥',
        f"üü§<b>ONE Vanish Hyperthing</b>üü§\n\n¬´–ë–ª–∏–∂—á–µ, –Ω—ñ–∂ –±—É–¥—å-–∫–æ–ª–∏¬ª - —É–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫—ñ –ª–∞—Ç–µ–∫—Å–Ω—ñ –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏, –Ω–∞ 35% —Ç–æ–Ω—à—ñ –∑–∞ –∑–≤–∏—á–∞–π–Ω—ñ –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏.\n\nüí® –í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –∑ –º'—è–∫—à–æ–≥–æ –ª–∞—Ç–µ–∫—Å—É.\nüåπ–ó–∞–±–µ–∑–ø–µ—á—É—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å —Ç–∞ –Ω—ñ–∂–Ω—ñ—Å—Ç—å.\n\nüí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(1)} ‚Ç¥",
        f'üü£<b>ONE Glowing Pleasure</b>üü£\n\n–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏, —â–æ —Å–≤—ñ—Ç—è—Ç—å—Å—è –≤ —Ç–µ–º—Ä—è–≤—ñ.\n\nüíß–í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –ª–∞—Ç–µ–∫—Å—É —ñ –º—ñ—Å—Ç—è—Ç—å —Å–∏–ª—ñ–∫–æ–Ω–æ–≤–∏–π –ª—É–±—Ä–∏–∫–∞–Ω—Ç.\nüåü–î–ª—è –Ω–∞–π–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ—à–∏—Ö —Ç–∞ –Ω–µ–∑–≤–∏—á–∞–π–Ω–∏—Ö!\n\nüí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(2)} ‚Ç¥',
        f'üî¥<b>ONE Tattoo Touch</b>üî¥ \n\n –ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º —Ç–µ–∫—Å—Ç—É—Ä–Ω–∏–º –º–∞–ª—é–Ω–∫–æ–º. \n\n üíó–ó–∞–±–µ–∑–ø–µ—á–∞—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–µ —Å—Ç–∏–º—É–ª—é–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è. \n üíé–í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –∑ —É–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –ª–∞—Ç–µ–∫—Å—É —ñ –º—ñ—Å—Ç—è—Ç—å —Å–∏–ª—ñ–∫–æ–Ω–æ–≤–∏–π –ª—É–±—Ä–∏–∫–∞–Ω—Ç. \nüêö–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å —Ç–∞ –º—ñ—Ü–Ω—ñ—Å—Ç—å –∑–∞–±–µ–∑–ø–µ—á–∞—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –∑–∞—Ö–∏—Å—Ç. \n\n üí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(3)} ‚Ç¥',
        f'üîµ<b>ONE Extreme Ribs</b>üîµ\n\n–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ –∑ —Ä–µ–±—Ä–∏—Å—Ç–æ—é —Ç–µ–∫—Å—Ç—É—Ä–æ—é –∑—ñ –∑–º–∞–∑–∫–æ—é –Ω–∞ —Å–∏–ª—ñ–∫–æ–Ω–æ–≤—ñ–π –æ—Å–Ω–æ–≤—ñ.\n\nüë©‚Äç‚ù§Ô∏è‚Äçüë®–©–µ –±—ñ–ª—å—à–µ –Ω–∞—Å–æ–ª–æ–¥.\nüåä–°—É–º—ñ—Å–Ω—ñ –∑ –ª—É–±—Ä–∏–∫–∞–Ω—Ç–∞–º–∏ –Ω–∞ —Å–∏–ª—ñ–∫–æ–Ω–æ–≤—ñ–π —Ç–∞ –≤–æ–¥–Ω—ñ–π –æ—Å–Ω–æ–≤—ñ.\n\nüí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(4)} ‚Ç¥',
        f'üü¢<b>ONE Flavor Waves</b>üü¢\n\n–ê—Ä–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω—ñ –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ –∫–ª–∞—Å–∏—á–Ω–æ—ó —Ñ–æ—Ä–º–∏ —É —Å—Ç–∏–ª—å–Ω—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ.\n\n üçå–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ –º–∞—é—Ç—å 6 —Å–º–∞–∫—ñ–≤: ‚ÄúMint Chocolate‚Äù, ‚ÄúIsland Punch‚Äù, ‚ÄúFresh Mint‚Äù, ‚ÄúChocolate Strawberry‚Äù, ‚ÄúBubblegum‚Äù, ‚ÄúBanana Split‚Äù.\nüçì–î–æ–¥–∞—Å—Ç—å –í–∞—à–æ–º—É –∂–∏—Ç—Ç—é –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–º–∞–∫—É!\n\nüí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(5)} ‚Ç¥',
        f"üü¢<b>ONE Classic Select</b>üü¢ \n\n –ö–ª–∞—Å–∏—á–Ω—ñ –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏‚Äì—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–æ–∫ —Ç–∞ —Ñ–æ—Ä–º–∞, –≥–ª–∞–¥–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞. \n \n üíß–ú—ñ—Å—Ç—è—Ç—å —Å–∏–ª—ñ–∫–æ–Ω–æ–≤–∏–π –ª—É–±—Ä–∏–∫–∞–Ω—Ç. \n üíé–í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –ª–∞—Ç–µ–∫—Å—É –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ.\n üë©‚Äç‚ù§Ô∏è‚Äçüë® –¢–æ–Ω–∫—ñ, –º'—è–∫—ñ —Ç–∞ –≥–ª–∞–¥–∫—ñ, –∑–∞–±–µ–∑–ø–µ—á–∞—Ç—å –ø—Ä–∏—î–º–Ω—ñ—à—ñ –≤—ñ–¥—á—É—Ç—Ç—è –¥–ª—è –æ–±–æ—Ö. \n \n üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(6)} ‚Ç¥",
        f'üü£<b>ONE Super Studs</b>üü£\n\n–£–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫—ñ –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ –∑ —Ç–æ—á–∫–æ–≤–∏–º —Ä–µ–ª—å—î—Ñ–æ–º.\n\nüî•–°–æ—Ç–Ω—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ—á–æ–∫ –Ω–∞ —ó—Ö –ø–æ–≤–µ—Ä—Ö–Ω—ñ –ø–æ—Å–∏–ª—é—é—Ç—å –≤—ñ–¥—á—É—Ç—Ç—è –Ω–∞ 100%.\nüí•–£–Ω—ñ–∫–∞–ª—å–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–Ω–µ—Å–µ —â–µ –±—ñ–ª—å—à–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è! \n\n üí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(7)} ‚Ç¥',
        f'‚ö´Ô∏è<b>ONE Legend XL</b>‚ö´Ô∏è\n\n–õ–∞—Ç–µ–∫—Å–Ω—ñ –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ –≤–µ–ª–∏–∫–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É.\n\n‚ô†Ô∏è–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ü—å–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É—î.\nü¶ã–ú–∞—é—Ç—å –≥–ª–∞–¥–∫—É —Ç–µ–∫—Å—Ç—É—Ä—É —Ç–∞ –º—ñ—Å—Ç—è—Ç—å —Å–∏–ª—ñ–∫–æ–Ω–æ–≤–∏–π –ª—É–±—Ä–∏–∫–∞–Ω—Ç.\n\n üí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(8)} ‚Ç¥',
        f'üü£<b>ONE UlraFeel</b>üü£\n\n–ö–æ–∂–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞ ONE UltraFeel 2-–≤-1 –º—ñ—Å—Ç–∏—Ç—å —É–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫–∏–π –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤ —Ç–∞ –ª—É–±—Ä–∏–∫–∞–Ω—Ç –Ω–∞ –≤–æ–¥–Ω—ñ–π –æ—Å–Ω–æ–≤—ñ One Oasis —î–º–Ω—ñ—Å—Ç—é 2 ml.\n\nüí¶–ú—ñ—Å—Ç–∏—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –ª—É–±—Ä–∏–∫–∞–Ω—Ç –Ω–∞ –≤–æ–¥–Ω—ñ–π –æ—Å–Ω–æ–≤—ñ.\nüí•–ó–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è —Ç–∞ –∫–æ–º—Ñ–æ—Ä—Ç  –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—é.\n\n üí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(9)} ‚Ç¥',
        f'üî¥<b>ONE Color Sensation</b>üî¥\n\n–ö–æ–ª—å–æ—Ä–æ–≤—ñ –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ –∫–ª–∞—Å–∏—á–Ω–æ—ó —Ñ–æ—Ä–º–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å —Å–∏–ª—ñ–∫–æ–Ω–æ–≤–∏–π –ª—É–±—Ä–∏–∫–∞–Ω—Ç.\n\n‚òòÔ∏è–í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ —ñ–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ–≥–æ –ª–∞—Ç–µ–∫—Å—É.\nüé®–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ 10 –∫–æ–ª—å–æ—Ä—ñ–≤: —á–µ—Ä–≤–æ–Ω–∏–π, –æ—Ä–∞–Ω–∂–µ–≤–∏–π, –∂–æ–≤—Ç–∏–π, –∑–µ–ª–µ–Ω–∏–π, —Å–º–∞—Ä–∞–≥–¥–æ–≤–∏–π, –±—ñ—Ä—é–∑–æ–≤–∏–π, —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π, —á–æ—Ä–Ω–∏–π —Ç–∞ —Å–∏–Ω—ñ–π.\nüåà–î–æ–¥–∞–π—Ç–µ —è—Å–∫—Ä–∞–≤–∏—Ö —Ñ–∞—Ä–± —É –í–∞—à–µ —ñ–Ω—Ç–∏–º–Ω–µ –∂–∏—Ç—Ç—è –∑ ONE Color Sensations.\n\n üí∞–í–∞—Ä—Ç—ñ—Å—Ç—å: {prices_condoms(10)} ‚Ç¥'
    ]
    return captions[userPage-1]

def captions_bin(zminna):
    captions_bin = [
        'üü†<b>ONE Super Sensitive</b>üü†', 'üü§<b>ONE Vanish Hyperthing</b>üü§', 'üü£<b>ONE Glowing Pleasure</b>üü£',
        'üî¥<b>ONE Tattoo Touch</b>üî¥',
        'üîµ<b>ONE Extreme Ribs</b>üîµ', 'üü¢<b>ONE Flavor Waves</b>üü¢', 'üü¢<b>ONE Classic Select</b>üü¢',
        'üü£<b>ONE Super Studs</b>üü£', '‚ö´Ô∏è<b>ONE Legend XL</b>‚ö´Ô∏è',
        'üü£<b>ONE UlraFeel</b>üü£', 'üî¥<b>ONE Color Sensation</b>üî¥'
    ]
    return captions_bin[zminna]

def prices(user_id):
    sumaOrder = 0
    cursor = db.cursor()
    cursor.execute(f"SELECT * FROM orders WHERE userID={user_id} and statusOrder={1}")
    result = cursor.fetchall()
    cursor.close()
    for i in range(0, len(result)):
        sumaOrder += result[i][3]
    return sumaOrder


def keyboards(user_id):
    cursor = db.cursor()
    cursor.execute(f"SELECT userPage FROM users WHERE userID={user_id}")
    userPage = cursor.fetchone()[0]
    cursor.close()

    try:
        cursor = db.cursor()
        cursor.execute(f"SELECT amount FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
        amount = cursor.fetchone()[0]
        print(amount)
        cursor.close()
    except:
        amount = 0

    keyboard = [
        [
            types.InlineKeyboardButton(text=f'üóë–ö–æ—à–∏–∫ {prices(user_id)} ‚Ç¥', callback_data='money_bin'),
            types.InlineKeyboardButton(text=f'üî¢ {amount} —à—Ç.', callback_data='write_one')
        ],
        [
            types.InlineKeyboardButton(text='-5 —à—Ç.', callback_data='minus_five'),
            types.InlineKeyboardButton(text='-1 —à—Ç.', callback_data='minus_one'),
            types.InlineKeyboardButton(text='+1 —à—Ç.', callback_data='plus_one'),
            types.InlineKeyboardButton(text='+5 —à—Ç.', callback_data='plus_five')
        ],
        [
            types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data='left'),
            types.InlineKeyboardButton(text=f'{userPage}/11', callback_data="number_of_page"),
            types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data='right')]
    ]

    return keyboard


@bot.message_handler(commands=['start'])
def handle_text(message):
    user_markup = types.ReplyKeyboardMarkup(True, False)
    user_markup.row('–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–ö–æ–Ω—Ç–∞–∫—Ç–∏')
    user_markup.row('–ö–æ—à–∏–∫')

    user_id = message.from_user.id
    username = message.from_user.username
    firstName = message.from_user.first_name
    userInfo = [user_id, username, firstName, 1]

    try:
        cursor = db.cursor()
        cursor.execute("INSERT INTO users (userID, userName, userFirstName, userPage) VALUES (?, ?, ?, ?);", userInfo)
        db.commit()
        cursor.close()
    except:
        print("This user already exist")

    print("–ó–∞–π—à–æ–≤/–ª–∞: ", username, user_id, datetime.now(timezone('Europe/Kiev')))

    bot.send_message(message.from_user.id,
                     "üëã–ü—Ä–∏–≤—ñ—Ç! –Ø –°–µ–Ω—å–π–æ—Ä Condonio!üçå\nüîí–Ø –∑—Ä–æ–±–ª—é —Ç–≤–æ—î –∫–æ—Ö–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–∏–º!üîí\nüëá–ù–∞—Ç–∏—Å–∫–∞–π '–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç' —ñ –æ–±–∏—Ä–∞–π —Å–≤—ñ–π –∑–∞—Ö–∏—Å—Ç!üëá",
                     reply_markup=user_markup)

@bot.message_handler(commands=['help'])
def help_info(message):
    contacts(message)

def contacts(message):
    markup = types.InlineKeyboardMarkup()
    insta = types.InlineKeyboardButton(text='Instagram',
                                       url='https://instagram.com/condonio.store?utm_medium=copy_link')
    manager = types.InlineKeyboardButton(text='–ú–µ–Ω–µ–¥–∂–µ—Ä', url='t.me/condonio_store')
    markup.add(insta)
    markup.add(manager)
    bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –∑–≤'—è–∑–∫—É", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def catalog_info(message):
    #–º–µ–Ω—é –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É
    if message.text == '–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç':
        #–≤–∏–∫–ª–∏–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        buttons_keyboard(message)

    elif message.text == '–ö–æ—à–∏–∫':
        user_id = message.from_user.id
        if prices(user_id) == 0:
            bot.send_message(message.from_user.id, text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            time.sleep(1.5)
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        else:
            show_money_bin(message)
    elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏':
            contacts(message)


def buttons_keyboard(message):
    user_id = message.from_user.id
    try:
        img = open(media(user_id), 'rb')
        reply_markup = types.InlineKeyboardMarkup(keyboards(user_id))
        try:
            bot.edit_message_media(media=types.InputMediaPhoto(img), chat_id=message.message.chat.id, message_id=message.message.message_id, reply_markup=reply_markup)
            bot.edit_message_caption(chat_id=message.message.chat.id, message_id=message.message.message_id, caption=captions(user_id), reply_markup=reply_markup,
                         parse_mode='html')
        except:
            bot.send_photo(message.from_user.id, img, caption=captions(user_id), reply_markup=reply_markup,
                       parse_mode='html')
    except:
        error(message)


@bot.callback_query_handler(func=lambda call: True)
def query_handler(message):
    user_id = message.from_user.id

    if message.data == 'right':
        try:
            cursor = db.cursor()
            cursor.execute(f"SELECT * FROM users WHERE userID={user_id}")
            one_result = cursor.fetchone()

            if (one_result[3] + 1) == 12:
                cursor.execute(f"UPDATE users SET userPage={1} WHERE userID={user_id}")
            else:
                cursor.execute(f"UPDATE users SET userPage={one_result[3] + 1} WHERE userID={user_id}")
            db.commit()
            cursor.close()

            buttons_keyboard(message)
        except:
            error(message)


    elif message.data == 'left':
        try:
            cursor = db.cursor()
            cursor.execute(f"SELECT * FROM users WHERE userID={user_id}")
            one_result = cursor.fetchone()

            if (one_result[3] - 1) == 0:
                cursor.execute(f"UPDATE users SET userPage={11} WHERE userID={user_id}")
            else:
                cursor.execute(f"UPDATE users SET userPage={one_result[3] - 1} WHERE userID={user_id}")
            db.commit()
            cursor.close()

            buttons_keyboard(message)
        except:
            error(message)

    elif message.data == 'plus_one':
        cursor = db.cursor()
        cursor.execute(f"SELECT userPage FROM users WHERE userID={user_id}")
        userPage = cursor.fetchone()[0]

        cursor.execute(f"SELECT * FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
        check_temp = cursor.fetchall()

        if not check_temp:
            orderInfo = [user_id, userPage, 1, 0, 1]
            cursor.execute(f"INSERT INTO orders VALUES(?,?,?,?,?)", orderInfo)
            db.commit()

            cursor.execute(
                f"SELECT orders.productID, amount, priceProduct FROM orders INNER JOIN products ON products.productID = orders.productID WHERE userID={user_id} AND statusOrder={1}")
            zminna = cursor.fetchall()
            try:
                for i in range(0, len(zminna)):
                    amountUser = zminna[i][1] * zminna[i][2]
                    cursor.execute(f"UPDATE orders SET price={amountUser} WHERE userID={user_id} AND productID={userPage}")
                db.commit()
            except db.Error:
                db.rollback()
        else:
            cursor.execute(
                f"SELECT amount FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
            amount = cursor.fetchone()[0]
            cursor.execute(
                f"UPDATE orders SET amount={amount + 1} WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
            db.commit()

            cursor.execute(
                f"SELECT orders.productID, amount, priceProduct FROM orders INNER JOIN products ON products.productID = orders.productID WHERE userID={user_id} AND statusOrder={1}")
            zminna = cursor.fetchall()
            try:
                for i in range(0, len(zminna)):
                    amountUser = zminna[i][1] * zminna[i][2]
                    cursor.execute(f"UPDATE orders SET price={amountUser} WHERE userID={user_id} AND productID={userPage}")
                db.commit()
            except db.Error:
                db.rollback()
        cursor.close()

        buttons_keyboard(message)

    elif message.data == 'minus_one':
        cursor = db.cursor()
        cursor.execute(f"SELECT userPage FROM users WHERE userID={user_id}")
        userPage = cursor.fetchone()[0]

        cursor.execute(f"SELECT * FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
        check_temp = cursor.fetchall()

        if check_temp:
            cursor.execute(
                f"SELECT amount FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
            amount = cursor.fetchone()[0]
            minus = amount - 1
            if minus <= 0:
                cursor.execute(
                    f"DELETE FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1} AND amount={amount}")
            else:
                cursor.execute(
                    f"UPDATE orders SET amount={minus} WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
            db.commit()

        cursor.execute(
            f"SELECT orders.productID, amount, priceProduct FROM orders INNER JOIN products ON products.productID = orders.productID WHERE userID={user_id} AND statusOrder={1}")
        zminna = cursor.fetchall()
        try:
            for i in range(0, len(zminna)):
                amountUser = zminna[i][1] * zminna[i][2]
                cursor.execute(f"UPDATE orders SET price={amountUser} WHERE userID={user_id} AND productID={userPage}")
            db.commit()
        except db.Error:
            db.rollback()
        cursor.close()

        buttons_keyboard(message)

    elif message.data == 'plus_five':
        cursor = db.cursor()
        cursor.execute(f"SELECT userPage FROM users WHERE userID={user_id}")
        userPage = cursor.fetchone()[0]

        cursor.execute(f"SELECT * FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
        check_temp = cursor.fetchall()

        if not check_temp:
            orderInfo = [user_id, userPage, 5, 0, 1]
            cursor.execute(f"INSERT INTO orders VALUES(?,?,?,?,?)", orderInfo)
            db.commit()

            cursor.execute(
                f"SELECT orders.productID, amount, priceProduct FROM orders INNER JOIN products ON products.productID = orders.productID WHERE userID={user_id} AND statusOrder={1}")
            zminna = cursor.fetchall()
            for i in range(0, len(zminna)):
                amountUser = zminna[i][1] * zminna[i][2]
                cursor.execute(f"UPDATE orders SET price={amountUser} WHERE userID={user_id} AND productID={userPage}")
            db.commit()
        else:
            cursor.execute(
                f"SELECT amount FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
            amount = cursor.fetchone()[0]
            cursor.execute(
                f"UPDATE orders SET amount={amount + 5} WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
            db.commit()

            cursor.execute(
                f"SELECT orders.productID, amount, priceProduct FROM orders INNER JOIN products ON products.productID = orders.productID WHERE userID={user_id} AND statusOrder={1}")
            zminna = cursor.fetchall()
            try:
                for i in range(0, len(zminna)):
                    amountUser = zminna[i][1] * zminna[i][2]
                    cursor.execute(f"UPDATE orders SET price={amountUser} WHERE userID={user_id} AND productID={userPage}")
                db.commit()
            except db.Error:
                db.rollback()
        cursor.close()

        buttons_keyboard(message)

    elif message.data == 'minus_five':
        cursor = db.cursor()
        cursor.execute(f"SELECT userPage FROM users WHERE userID={user_id}")
        userPage = cursor.fetchone()[0]

        cursor.execute(f"SELECT * FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
        check_temp = cursor.fetchall()

        if check_temp:
            cursor.execute(
                f"SELECT amount FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
            amount = cursor.fetchone()[0]
            minus = amount - 5
            if minus <= 0:
                cursor.execute(
                    f"DELETE FROM orders WHERE userID={user_id} AND productID={userPage} AND statusOrder={1} AND amount={amount}")
            else:
                cursor.execute(
                    f"UPDATE orders SET amount={minus} WHERE userID={user_id} AND productID={userPage} AND statusOrder={1}")
            db.commit()

        cursor.execute(
            f"SELECT orders.productID, amount, priceProduct FROM orders INNER JOIN products ON products.productID = orders.productID WHERE userID={user_id} AND statusOrder={1}")
        zminna = cursor.fetchall()
        try:
            for i in range(0, len(zminna)):
                amountUser = zminna[i][1] * zminna[i][2]
                cursor.execute(f"UPDATE orders SET price={amountUser} WHERE userID={user_id} AND productID={userPage}")
            db.commit()
        except db.Error:
            db.rollback()
        cursor.close()

        buttons_keyboard(message)

    elif message.data == 'money_bin':
        user_id = message.from_user.id
        if prices(user_id) == 0:
            bot.send_message(message.from_user.id, text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            time.sleep(1.5)
            bot.delete_message(chat_id=message.message.chat.id, message_id=message.message.message_id + 1)
        else:
            show_money_bin(message)

    elif message.data == 'remove_bin':
        cursor = db.cursor()
        cursor.execute(f"SELECT userPage FROM users WHERE userID={user_id}")
        cursor.execute(
            f"SELECT orders.productID, amount, priceProduct FROM orders INNER JOIN products ON products.productID = orders.productID WHERE userID={user_id} AND statusOrder={1}")
        zminna = cursor.fetchall()

        try:
            for i in range(0, len(zminna)):
                cursor.execute(
                    f"DELETE FROM orders WHERE userID={user_id} AND statusOrder={1}")
            db.commit()
        except db.Error:
            db.rollback()

        cursor.close()
        bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                              text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        time.sleep(1.5)
        bot.delete_message(chat_id=message.message.chat.id, message_id=message.message.message_id)

    elif message.data == 'edit_bin':
        time.sleep(0.5)
        bot.delete_message(chat_id=message.message.chat.id, message_id=message.message.message_id)

    elif message.data == 'make_the_order':
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name

        cursor = db.cursor()
        cursor.execute(f"SELECT * FROM orders WHERE userID={user_id} AND statusOrder={1}")
        zminna = cursor.fetchall()

        temp = []

        for i in range(0, len(zminna)):
            text = f"{captions_bin(zminna[i][1] - 1)} ( {zminna[i][2]} —à—Ç ) = {zminna[i][3]} ‚Ç¥\n"
            temp.insert(i, text)
        bot.send_message(chat_id=5203341262,
                         text=f"Customer: {first_name, last_name, username}\n\n" + '\n'.join(
                             temp) + f'\n–ó–∞–≥–∞–ª–æ–º: {prices(user_id)} ‚Ç¥', parse_mode='html')
        try:
            for i in range(0, len(zminna)):
                cursor.execute(f"UPDATE orders SET statusOrder={0} WHERE userID={user_id}")
            db.commit()
        except db.Error:
            db.rollback()
        cursor.close()
        bot.send_message(message.from_user.id, text="–î—è–∫—É—é –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑ –í–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä")


def show_money_bin(message):
    user_id=message.from_user.id
    keyboard_bin = [
        [
            types.InlineKeyboardButton(text=f'‚úèÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data='edit_bin'),
            types.InlineKeyboardButton(text=f'‚ùå–û—á–∏—Å—Ç–∏—Ç–∏', callback_data='remove_bin')
        ],
        [
            types.InlineKeyboardButton(text=f'‚úÖ–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='make_the_order')
        ]
    ]
    temp = []

    reply_markup = types.InlineKeyboardMarkup(keyboard_bin)

    cursor = db.cursor()
    cursor.execute(f"SELECT * FROM orders WHERE userID={user_id} AND statusOrder={1}")
    zminna = cursor.fetchall()
    cursor.close()

    for i in range(0, len(zminna)):
        text = f"{captions_bin(zminna[i][1] - 1)} ( {zminna[i][2]} —à—Ç ) = {zminna[i][3]} ‚Ç¥\n"
        temp.insert(i, text)
    bot.send_message(message.from_user.id,
                     text="<b>–ö–æ—à–∏–∫</b>\n\n" + '\n'.join(temp) + f'\n<b>–ó–∞–≥–∞–ª–æ–º:</b> {prices(user_id)} ‚Ç¥',
                     reply_markup=reply_markup, parse_mode='html')


bot.polling(none_stop=True)